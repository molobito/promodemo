name: CI - CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  PARENT_IMAGE: "gcr.io/distroless/static-debian12@sha256:8cbe18a8a9a9fefe70590dc8f6a7bc70b4bbe41f262d9dab9084337adabf6d26"
  IMG_NAME: "promodemoapp"
  AWS_REGION: "us-east-1"
  AWS_KMS_KEY: "alias/cosign-aws-777444"
  DEV_ACT: "282527170177"
  STAGE_ACT: "053353455593"
  PROD_ACT: "842572306205"
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build App Img from Dockerfile
        run: |
          docker build --build-arg PARENT_IMG=${{ env.PARENT_IMAGE }} -t ${{ env.IMG_NAME }}:${{ github.sha }} .

      - name: Save App Img Locally as Tar
        run: |
          docker save --output ${{ github.workspace }}/${{ env.IMG_NAME }}.img.tar ${{ env.IMG_NAME }}:${{ github.sha }}

      - name: Gen md5sum for Img Tar
        run: md5sum ${{ github.workspace }}/${{ env.IMG_NAME }}.img.tar

      - name: Upload App Img Tar as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: img-artifact-${{ env.IMG_NAME }}
          path: ${{ github.workspace }}/${{ env.IMG_NAME }}.img.tar

  PreDeployDev:
    if: github.event_name == 'pull_request'
    needs: [Build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    environment:
      name: Dev
      url: 'http://dev.myapp.com'

    steps:
      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: arn:aws:iam::${{ env.DEV_ACT }}:role/github-dev-role
          role-session-name: github_aws_federated_oidc
          aws-region: ${{ env.AWS_REGION }}

      - name: Test AWS Creds
        run: |
          aws sts get-caller-identity

      - name: Install Crypto-Signer
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v2.2.4'

      - name: Install JQ
        run: sudo apt install -y jq

      - name: Download Img Tar Artifact
        uses: actions/download-artifact@v4
        with:
          name: img-artifact-${{ env.IMG_NAME }}
          path: ${{ github.workspace }}

      - name: Display Downloaded Img Artifact
        run: ls -R ${{ github.workspace }}

      - name: Gen md5sum for Img Tar
        run: md5sum ${{ github.workspace }}/${{ env.IMG_NAME }}.img.tar

      - name: Load App Img Tar into Docker
        run: |
          docker load -i ${{ github.workspace }}/${{ env.IMG_NAME }}.img.tar

      - name: Tag Docker Local Img
        run: |
          docker image tag ${{ env.IMG_NAME }}:${{ github.sha }} ${{ env.DEV_ACT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMG_NAME }}:${{ github.sha }}
  
      - name: Display loaded Docker images
        run: |
          docker images

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.IMG_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Obtain Img Digest
        shell: bash
        id: gen_img_digest
        run: |
            IMG_DIGEST=$(docker inspect --format='{{index  .RepoDigests 0}}' ${{ env.DEV_ACT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMG_NAME }}:${{ github.sha }}|tr -d '\n') 
            echo $IMG_DIGEST
            echo "IMAGE_DIGEST=$IMG_DIGEST" >> $GITHUB_OUTPUT

      - name: Crypto-Sign Image
        shell: bash
        run: cosign sign --key awskms:///${{ env.AWS_KMS_KEY }} --tlog-upload=false ${{ steps.gen_img_digest.outputs.IMAGE_DIGEST }}

  DeployDev:
    if: github.event.ref == 'refs/heads/main'
    needs: [Build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    environment:
      name: Dev
      url: 'http://dev.myapp.com'

    steps:
      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: arn:aws:iam::${{ env.DEV_ACT }}:role/github-dev-role
          role-session-name: github_aws_federated_oidc
          aws-region: ${{ env.AWS_REGION }}

      - name: Test AWS Creds
        run: |
          aws sts get-caller-identity

      - name: Install Crypto-Signer
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v2.2.4'

      - name: Install JQ
        run: sudo apt install -y jq

      - name: Download Img Tar Artifact
        uses: actions/download-artifact@v4
        with:
          name: img-artifact-${{ env.IMG_NAME }}
          path: ${{ github.workspace }}

      - name: Display Downloaded Img Artifact
        run: ls -R ${{ github.workspace }}

      - name: Gen md5sum for Img Tar
        run: md5sum ${{ github.workspace }}/${{ env.IMG_NAME }}.img.tar

      - name: Load App Img Tar into Docker
        run: |
          docker load -i ${{ github.workspace }}/${{ env.IMG_NAME }}.img.tar

      - name: Tag Docker Local Img
        run: |
          docker image tag ${{ env.IMG_NAME }}:${{ github.sha }} ${{ env.DEV_ACT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMG_NAME }}:${{ github.sha }}
  
      - name: Display loaded Docker images
        run: |
          docker images

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.IMG_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Obtain Img Digest
        shell: bash
        id: gen_img_digest
        run: |
            IMG_DIGEST=$(docker inspect --format='{{index  .RepoDigests 0}}' ${{ env.DEV_ACT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMG_NAME }}:${{ github.sha }}|tr -d '\n') 
            echo $IMG_DIGEST
            echo "IMAGE_DIGEST=$IMG_DIGEST" >> $GITHUB_OUTPUT

      - name: Crypto-Sign Image
        shell: bash
        run: cosign sign --key awskms:///${{ env.AWS_KMS_KEY }} --tlog-upload=false ${{ steps.gen_img_digest.outputs.IMAGE_DIGEST }}

  DeployStaging:
    needs: [DeployDev]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    environment:
      name: Staging
      url: 'http://test.myapp.com'

    steps:
      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: arn:aws:iam::${{ env.STAGE_ACT }}:role/github-stage-role
          role-session-name: github_aws_federated_oidc
          aws-region: ${{ env.AWS_REGION }}

      - name: Test AWS Creds
        run: |
          aws sts get-caller-identity

      - name: Install Crypto-Signer
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v2.2.4'

      - name: Install JQ
        run: sudo apt install -y jq

      - name: Download Img Tar Artifact
        uses: actions/download-artifact@v4
        with:
          name: img-artifact-${{ env.IMG_NAME }}
          path: ${{ github.workspace }}

      - name: Display Downloaded Img Artifact
        run: ls -R ${{ github.workspace }}

      - name: Gen md5sum for Img Tar
        run: md5sum ${{ github.workspace }}/${{ env.IMG_NAME }}.img.tar

      - name: Load App Img Tar into Docker
        run: |
          docker load -i ${{ github.workspace }}/${{ env.IMG_NAME }}.img.tar

      - name: Tag Docker Local Img
        run: |
          docker image tag ${{ env.IMG_NAME }}:${{ github.sha }} ${{ env.STAGE_ACT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMG_NAME }}:${{ github.sha }}
      - name: Display loaded Docker images
        run: |
          docker images

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.IMG_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Obtain Img Digest
        shell: bash
        id: gen_img_digest
        run: |
            IMG_DIGEST=$(docker inspect --format='{{index  .RepoDigests 0}}' ${{ env.STAGE_ACT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMG_NAME }}:${{ github.sha }}|tr -d '\n') 
            echo $IMG_DIGEST
            echo "IMAGE_DIGEST=$IMG_DIGEST" >> $GITHUB_OUTPUT

  DeployProd:
    needs: [DeployStaging]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    environment:
      name: Prod
      url: 'http://www.myapp.com'

    steps:
      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: arn:aws:iam::${{ env.PROD_ACT }}:role/github-prod-role
          role-session-name: github_aws_federated_oidc
          aws-region: ${{ env.AWS_REGION }}

      - name: Test AWS Creds
        run: |
          aws sts get-caller-identity

      - name: Install Crypto-Signer
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v2.2.4'

      - name: Install JQ
        run: sudo apt install -y jq

      - name: Download Img Tar Artifact
        uses: actions/download-artifact@v4
        with:
          name: img-artifact-${{ env.IMG_NAME }}
          path: ${{ github.workspace }}

      - name: Display Downloaded Img Artifact
        run: ls -R ${{ github.workspace }}

      - name: Gen md5sum for Img Tar
        run: md5sum ${{ github.workspace }}/${{ env.IMG_NAME }}.img.tar

      - name: Load App Img Tar into Docker
        run: |
          docker load -i ${{ github.workspace }}/${{ env.IMG_NAME }}.img.tar

      - name: Tag Docker Local Img
        run: |
          docker image tag ${{ env.IMG_NAME }}:${{ github.sha }} ${{ env.PROD_ACT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMG_NAME }}:${{ github.sha }}
      - name: Display loaded Docker images
        run: |
          docker images

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.IMG_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Obtain Img Digest
        shell: bash
        id: gen_img_digest
        run: |
            IMG_DIGEST=$(docker inspect --format='{{index  .RepoDigests 0}}' ${{ env.PROD_ACT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMG_NAME }}:${{ github.sha }}|tr -d '\n') 
            echo $IMG_DIGEST
            echo "IMAGE_DIGEST=$IMG_DIGEST" >> $GITHUB_OUTPUT

